import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Put your name here
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        //if there is a title, outprints it
        if (channel.child(getChildElement(channel, "title"))
                .numberOfChildren() > 0) {
            out.println("<html> <head> <title> "
                    + channel.child(getChildElement(channel, "title")).child(0)
                            .toString()
                    + " </title> </head>");
            //if not, there is an empty title
        } else {
            out.println("<html> <head> <title> Empty Title </title> </head>");
        }

        //outprints a link to the news page with the title
        if (channel.child(getChildElement(channel, "link"))
                .numberOfChildren() > 1) {
            out.print("<body> <h1><a href=" + "\"" + channel
                    .child(getChildElement(channel, "link")).child(0).toString()
                    + "\">");
            out.println(channel.child(getChildElement(channel, "title"))
                    .child(0).toString() + "</a></h1> </body>");
        } else {
            out.println("<html> <head> <title> Empty Link </title> </head>");
        }

        //if there is a description, outprints it
        if (channel.child(getChildElement(channel, "description"))
                .numberOfChildren() > 0) {
            out.println("<p>"
                    + channel.child(getChildElement(channel, "description"))
                            .child(0).toString()
                    + "</p>");
            //if not, there is an empty description
        } else {
            out.println(
                    "<html> <head> <title> No Description </title> </head>");
        }
        //sets up the table to be used for all of the entries
        out.println("<table border=" + "\"" + "1" + "\">");
        out.println("<tr>\r\n" + "<th>Date</th>\r\n" + "<th>Source</th>\r\n"
                + "<th>News</th>\r\n" + "</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";
        //ends the table, closes the body and the file
        out.println("</table>");
        out.println("</body> </html>");

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int index = -1;
        int i = 0;
        //runs for all of the children, and stops when the first instance is found.
        while (index == -1 && i < xml.numberOfChildren()) {
            if (xml.child(i).label().equals(tag)) {
                index = i;
            }
            i++;
        }

        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        //starts the row of the table
        out.println("<tr>");
        //outprints the publish date of the article, if there is one
        int element = getChildElement(item, "pubDate");
        if (element == -1) {
            out.println("<td>No date available</td>");
        } else {
            out.println(
                    "<td>" + item.child(element).child(0).label() + "</td>");
        }

        //outprints the source of the article, if there is one
        element = getChildElement(item, "source");
        if (element == -1) {
            out.println("<td>No source available</td>");
        } else {
            out.println("<td><a href = "
                    + item.child(element).attributeValue("url") + ">"
                    + item.child(element).child(0).label() + "</a></td>");
        }

        //outprints the title (or description) of the article, if there is one
        element = getChildElement(item, "title");
        if (element > 0) {
            element = getChildElement(item, "description");
            String description = "";
            if (element != -1) {
                description = item.child(element).label();
            }
            element = getChildElement(item, "link");
            if (element == -1) {
                out.println("<td>" + description + "</td>");
            } else {
                out.println(
                        "<td><a href = " + item.child(element).child(0).label()
                                + ">" + description + "</a></td>");
            }
        } else {
            String title = item.child(element).child(0).label();
            element = getChildElement(item, "link");
            if (element == -1) {
                out.println("<td>" + title + "</td>");
            } else {
                out.println(
                        "<td><a href = " + item.child(element).child(0).label()
                                + ">" + title + "</a></td>");
            }
        }
        //ends the row of the table
        out.println("</tr>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        SimpleWriter html = new SimpleWriter1L("RSSReader.html");

        out.print("Enter the URL of an RSS 2.0 news feed: ");
        String url = in.nextLine();
        XMLTree xml = new XMLTree1(url);
        XMLTree channel = xml.child(0);
        //makes sure that the link is a valid rss 2.0 feed.
        if (xml.label().equals("rss")
                && xml.attributeValue("version").equals("2.0")) {
            outputHeader(channel, html);

            //gets the first instance of a news article, and outputs all of them
            int x = getChildElement(channel, "item");
            if (x > 0) {
                while (x < channel.numberOfChildren()) {
                    processItem(channel.child(x), html);
                    x++;
                }
                outputFooter(html);
                //if the feed is invalid, the program ends.
            }
        } else {
            out.print("The link inputted is not a valid RSS 2.0 news feed.");

        }

        //close the input and output streams
        html.close();
        in.close();
        out.close();
    }

}
